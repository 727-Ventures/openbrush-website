(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{3967:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return E}});var a=e(5893),r=e(9008),s=e(2833),i=e.n(s),o=e(1664);function c(t){var n=t.title;t.illustration;return(0,a.jsxs)("div",{className:i().bannerContainer,children:[(0,a.jsxs)("div",{className:i().bannerInnerContentHolder,children:[(0,a.jsx)("div",{className:i().headlineBlock,children:(0,a.jsx)("h1",{children:n})}),(0,a.jsxs)("div",{className:i().illustrationConstructor,children:[(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/ink.svg",alt:"ink"}),(0,a.jsx)("span",{className:i().ink,children:"ink!"})]}),(0,a.jsx)("img",{src:"/img/plus.svg",alt:"plus"}),(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{className:i().brushImg,src:"/img/brush.svg",alt:"brush"}),(0,a.jsx)("span",{className:i().openbrush,children:"OpenBrush"})]}),(0,a.jsx)("img",{src:"/img/equals.svg",alt:"equals"}),(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/contract.svg",alt:"ink"}),(0,a.jsx)("span",{className:i().contracts,children:"Smart Contracts"})]})]}),(0,a.jsx)("div",{className:i().ctaContainer,children:(0,a.jsx)(o.default,{href:"/#wizard",children:(0,a.jsx)("a",{onClick:function(t){var n;t.preventDefault(),null===(n=document.getElementById("wizard"))||void 0===n||n.scrollIntoView({behavior:"smooth",block:"start"})},children:"TRY IT OUT"})})})]}),(0,a.jsxs)("p",{className:i().createdBy,children:["created by",(0,a.jsx)("a",{href:"https://www.supercolony.net",target:"_blank",children:(0,a.jsx)("img",{src:"/img/new-supercolony.svg",className:i().supercolonyImg})})]}),(0,a.jsxs)("div",{className:i().bannerContainerDecorWrapper,children:[(0,a.jsx)("div",{className:i().leftBottom}),(0,a.jsx)("div",{className:i().rightBottom,children:(0,a.jsx)("div",{})})]})]})}var l=e(8073),u=e.n(l),d=function(t){var n=t.title,e=t.data;return(0,a.jsxs)("div",{className:u().partnersContainer,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:n}),(0,a.jsx)("div",{className:u().logoWrapper,children:e&&e.map((function(t,n){return(0,a.jsx)(o.default,{href:t.link,children:(0,a.jsx)("a",{children:(0,a.jsx)("img",{src:t.src,alt:t.alt},n)})},n.toString())}))})]})},m=e(4826),p=e.n(m),f=function(t){var n=t.title,e=t.data;return(0,a.jsxs)("div",{className:p().partnersContainer,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:n}),(0,a.jsx)("div",{className:p().logoWrapper,children:e&&e.map((function(t,n){return(0,a.jsx)(o.default,{href:t.link,children:(0,a.jsx)("a",{children:(0,a.jsx)("img",{src:t.src,alt:t.alt},n)})},n.toString())}))})]})},h=e(7294),g=e(5660),_=e.n(g),S=[{alt:"logo",src:"/img/partners/logo6.svg",link:"https://applicature.com/"},{alt:"web3",src:"/img/partners/web3.svg",link:"https://web3.foundation/"},{alt:"alliance",src:"/img/partners/allianceblock.svg",link:"https://allianceblock.io/"},{alt:"astar",src:"/img/partners/astar.svg",link:"https://astar.network/"}],b=[{alt:"web3",src:"/img/funded-by/web3.svg",link:"https://web3.foundation/"},{alt:"alliance",src:"/img/funded-by/allianceblock.svg",link:"https://allianceblock.io/"}],x=e(3143),k=e(7246),v=e.n(k),j=[{name:"psp22",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP22",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""},{name:"Premint",type:"text",initState:"100",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP22`] "},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows create `amount` tokens and assigns them to `account`, increasing the total supply"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows token holders to destroy both their own tokens and those that they have an allowance for."},{name:"Wrapper",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to wrap your PSP22 token in a PSP22Wrapper token which can be used for example for governance"},{name:"FlashMint",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows the user to perform a flash loan on the token my minting the borrowd amount and then burning it along with fees for the loan"},{name:"Pausable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to pause all token operations"},{name:"Capped",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to implement with a supply cap, analogue to ERC20Capped"}]}]},{name:"psp1155",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP1155",tooltip:""},{name:"URI",type:"text",initState:"https://...",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP1155`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows minting of new tokens"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows token holders to destroy their tokens"}]}]},{name:"psp34",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP34",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP34`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that exposes the mint function"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that allows token holders to destroy their tokens"}]}]}],C=e(3961),P=e(4283),y=e(5345),N=e.n(y),w=function(t){var n=t.data,e=(0,h.useState)(n),r=e[0],s=e[1],i=(0,h.useState)("rust"),o=i[0],c=i[1];if((0,h.useEffect)((function(){s(n)}),[n,r]),r)switch(r.type){case"psp22":return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:N().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return c("rust")},className:"rust"===o?N().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return c("toml")},className:"toml"===o?N().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:N().mainContent,children:"rust"===o?(0,a.jsx)(C.Z,{language:"rust",wrapLongLines:!0,style:P.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n                                \n#[brush::contract]\npub mod my_token {\n    use ink_prelude::{\n        string::String,\n        vec::Vec,\n    };\n    use brush::contracts::psp22::*; '.concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    use brush::contracts::psp22::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    use brush::contracts::psp22::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    use brush::contracts::psp22::extensions::mintable::*;":""," ").concat(r.currentControlsState.find((function(t){return"Wrapper"===t.name})).state?"\n    use brush::contracts::psp22::extensions::wrapper::*;":""," ").concat(r.currentControlsState.find((function(t){return"FlashMint"===t.name})).state?"\n    use brush::contracts::psp22::extensions::flashmint::*;":""," ").concat(r.currentControlsState.find((function(t){return"Pausable"===t.name})).state?"\n    use brush::{\n        contracts::pausable::*,\n        modifiers,\n    };":"","\n\n    #[ink(storage)]\n    #[derive(Default, PSP22Storage").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?", PSP22MetadataStorage":"").concat(r.currentControlsState.find((function(t){return"Wrapper"===t.name})).state?", PSP22WrapperStorage":"").concat(r.currentControlsState.find((function(t){return"Pausable"==t.name})).state?", PausableStorage":"",")]\n    pub struct ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {\n        #[PSP22StorageField]\n        psp22: PSP22Data, ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n        #[PSP22MetadataStorageField]\n        metadata: PSP22MetadataData,":""," ").concat(r.currentControlsState.find((function(t){return"Wrapper"===t.name})).state?"\n        #[PSP22WrapperStorageField]\n        wrapper: PSP22WrapperData,":""," ").concat(r.currentControlsState.find((function(t){return"Pausable"===t.name})).state?"\n        #[PausableStorageField]\n        pause: PausableData,":""," ").concat(r.currentControlsState.find((function(t){return"Capped"===t.name})).state?"\n        cap: Balance,":"","\n    }\n        \n    impl PSP22 for ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {} ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    impl PSP22Metadata for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    impl PSP22Burnable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    impl PSP22Mintable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Wrapper"===t.name})).state?"\n    impl PSP22Wrapper for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"FlashMint"===t.name})).state?"\n    impl FlashLender for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Pausable"===t.name})).state?"\n    impl Pausable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):"","\n        \n    impl ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?", name: Option<String>, symbol: Option<String>, decimal: u8":"").concat(r.currentControlsState.find((function(t){return"Capped"===t.name})).state?", cap: Balance":"",") -> Self {\n            let mut instance = Self::default(); ").concat(r.currentControlsState.find((function(t){return"Capped"===t.name})).state?"\n            assert!(instance.init_cap(cap).is_ok());":""," ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n            instance.metadata.name = name;\n            instance.metadata.symbol = symbol;\n            instance.metadata.decimals = decimal;":"","\n            assert!(instance._mint(instance.env().caller(), initial_supply).is_ok());\n            instance\n        }  ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n            \n        #[ink(message)]\n        pub fn burn_from_many(&mut self, accounts: Vec<(AccountId, Balance)>) {\n            for account in accounts.iter() {\n                self.burn(account.0, account.1);\n            }\n        }":""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n            \n        #[ink(message)]\n        pub fn mint_to(&mut self, account: AccountId, amount: Balance) {\n            self.mint(account, amount);\n        }":""," ").concat(r.currentControlsState.find((function(t){return"Pausable"===t.name})).state?"\n        \n        #[ink(message)]\n        pub fn change_state(&mut self) -> Result<(), PSP22Error> {\n            if self.paused() {\n                self._unpause()\n            } else {\n                self._pause()\n            }\n        }":""," ").concat(r.currentControlsState.find((function(t){return"Capped"===t.name})).state?'\n        \n        /// Method to return token\'s cap\n        #[ink(message)]\n        pub fn cap(&self) -> Balance {\n            self.cap\n        }\n        \n        /// Overrides the `_mint` function to check for cap overflow before minting tokens\n        /// Performs `PSP22Internal::_mint` after the check succeeds\n        fn _mint(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n            if (self.total_supply() + amount) > self.cap() {\n                return Err(PSP22Error::Custom(String::from("Cap exceeded")))\n            }\n            PSP22Internal::_mint(self, account, amount)\n        }\n\n        /// Initializes the token\'s cap\n        fn init_cap(&mut self, cap: Balance) -> Result<(), PSP22Error> {\n            if cap <= 0 {\n                return Err(PSP22Error::Custom(String::from("Cap must be above 0")))\n            }\n            self.cap = cap;\n            Ok(())\n        }':"","\n    }\n}")}):(0,a.jsx)(C.Z,{language:"toml",wrapLongLines:!0,style:P.YC,children:'[package]\nname = "my_token"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "1.0.0", default-features = false, features = ["derive"], optional = true }\n\n# Include brush as a dependency and enable default implementation for PSP22 via brush feature\nbrush = { tag = "v1.3.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp22"'.concat(r.currentControlsState.find((function(t){return"Pausable"===t.name})).state?', "pausable"':"",'] }\n\n[lib]\nname = "my_psp22"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    "brush/std",\n]\n')})})]});case"psp1155":return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:N().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return c("rust")},className:"rust"===o?N().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return c("toml")},className:"toml"===o?N().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:N().mainContent,children:"rust"===o?(0,a.jsx)(C.Z,{language:"rust",wrapLongLines:!0,style:P.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[brush::contract]\npub mod my_psp1155 {\n    use ink_prelude::{\n        string::String,\n        vec,\n    };\n    use ink_storage::collections::HashMap as StorageHashMap;\n    use brush::contracts::psp1155::*; '.concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    use brush::contracts::psp1155::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    use brush::contracts::psp1155::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    use brush::contracts::psp1155::extensions::mintable::*;":"","\n\n    #[ink(storage)]\n    #[derive(Default, PSP1155Storage").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?", PSP1155MetadataStorage":"",")]\n    pub struct ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {\n        #[PSP1155StorageField]\n        psp1155: PSP1155Data,\n        denied_ids: StorageHashMap<Id, ()>, ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n        #[PSP1155MetadataStorageField]\n        metadata: PSP1155MetadataData,":"","  \n    }\n    \n    impl PSP1155 for ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {} ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    impl PSP1155Metadata for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    impl PSP1155Burnable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    impl PSP1155Mintable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):"","\n    \n    impl ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {\n        #[ink(constructor)]\n        pub fn new(").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"uri: Option<String>":"",") -> Self {\n            ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"let mut instance = Self::default();\n            instance.metadata.uri = uri;\n            instance":"Self::default()","\n        }\n\n        #[ink(message)]\n        pub fn deny(&mut self, id: Id) {\n            self.denied_ids.insert(id, ());\n        } ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?'\n        #[ink(message)]\n        pub fn mint_tokens(&mut self, id: Id, amount: Balance) -> Result<(), PSP1155Error> {\n            if self.denied_ids.get(&id).is_some() {\n                return Err(PSP1155Error::Custom(String::from("Id is denied")))\n            }\n            self._mint_to(Self::env().caller(), vec![(id, amount)])\n        }':"","\n    } \n}\n")}):(0,a.jsx)(C.Z,{language:"toml",wrapLongLines:!0,style:P.YC,children:'[package]\nname = "my_psp1155"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "1.0.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\nbrush = { tag = "v1.3.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp1155"] }\n\n[lib]\nname = "my_psp1155"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    # These dependencies\n    "brush/std",\n]\nink-as-dependency = []'})})]});case"psp34":return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:N().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return c("rust")},className:"rust"===o?N().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return c("toml")},className:"toml"===o?N().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:N().mainContent,children:"rust"===o?(0,a.jsx)(C.Z,{language:"rust",wrapLongLines:!0,style:P.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n                    \n#[brush::contract]\npub mod my_psp34 {\n    use ink_prelude::string::String;\n    use brush::contracts::psp34::*; '.concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    use brush::contracts::psp34::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    use brush::contracts::psp34::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    use brush::contracts::psp34::extensions::mintable::*;":"","\n    \n\n    #[derive(Default, PSP34Storage").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?", PSP34MetadataStorage":"",")]\n    #[ink(storage)]\n    pub struct ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state,"{\n        #[PSP34StorageField]\n        psp34: PSP34Data,\n        next_id: u8, ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n        #[PSP34MetadataStorageField]\n        metadata: PSP34MetadataData,":"","\n    }\n\n    impl PSP34 for ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}").concat(r.currentControlsState.find((function(t){return"Burnable"===t.name})).state?"\n    impl PSP34Burnable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n    impl PSP34Mintable for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?"\n    impl PSP34Metadata for ".concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}\n    impl PSP34Internal for ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {}"):"","\n\n    impl ").concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state," {\n        #[ink(constructor)]\n        pub fn new(id: Id) -> Self {\n            ").concat(r.currentControlsState.find((function(t){return"Metadata"===t.name})).state?'let mut instance = Self::default();\n            instance._set_attribute(id.clone(), String::from("name").into_bytes(), String::from("'.concat(r.currentControlsState.find((function(t){return"Name"===t.name})).state,'").into_bytes());\n            instance._set_attribute(id, String::from("symbol").into_bytes(), String::from("').concat(r.currentControlsState.find((function(t){return"Symbol"===t.name})).state,'").into_bytes());').concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n            instance.mint_token();":"","\n            instance"):"Self::default()","\n        } ").concat(r.currentControlsState.find((function(t){return"Mintable"===t.name})).state?"\n        /// Mint method which mints a token and updates the id of next token\n        #[ink(message)]\n        pub fn mint_token(&mut self) {\n            self.mint(Self::env().account_id(), Id::U8(self.next_id));\n            self.next_id += 1;\n        }":"","\n    }\n}")}):(0,a.jsx)(C.Z,{language:"toml",wrapLongLines:!0,style:P.YC,children:'[package]\nname = "my_psp34"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "1.0.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\nbrush = { tag = "v1.3.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp34"] }\n\n[lib]\nname = "my_psp34"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    # These dependencies\n    "brush/std",\n]\nink-as-dependency = []'})})]})});default:return(0,a.jsx)(a.Fragment,{})}return(0,a.jsx)(a.Fragment,{})},B=e(1233),W=function(){var t=(0,h.useState)(0),n=t[0],e=t[1],r=(0,h.useState)(j),s=r[0],i=(r[1],(0,h.useState)([])),c=i[0],l=i[1],u=(0,h.useState)(!1),d=u[0],m=u[1];return(0,h.useEffect)((function(){var t=[];s.forEach((function(n,e){t.push({type:n.name,currentControlsState:[]}),n.controls.forEach((function(n){n.optionList.forEach((function(n){t[e].currentControlsState.push({name:n.name,state:n.initState})}))}))})),l(t)}),[s]),(0,a.jsxs)("div",{className:v().componentContainer,id:"wizard",children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"How to use: "}),(0,a.jsx)("div",{className:v().scrollWrapper,children:(0,a.jsxs)("div",{className:v().wizardWrapper,children:[(0,a.jsxs)("div",{className:v().header,children:[(0,a.jsxs)("div",{className:v().tokenStandardRow,children:[(0,a.jsx)("div",{className:"".concat(v().controlsDisplayingController," ").concat(d?"":v().open),onClick:function(){return m(!d)},children:(0,a.jsx)("img",{src:"/icons/arrowDown.svg",alt:"icon"})}),s.map((function(t,r){return(0,a.jsx)("div",{onClick:function(){e(r)},className:n===r?"".concat(v().active," ").concat(v().tokenStandard):"".concat(v().tokenStandard),children:t.name},r.toString())}))]}),(0,a.jsx)("div",{className:v().actionsRow})]}),(0,a.jsxs)("div",{className:v().body,children:[(0,a.jsx)("div",{className:d?"".concat(v().contractControls," ").concat(v().closed):"".concat(v().contractControls),children:s.map((function(t,e){return(0,a.jsx)("div",{style:{display:n!==e?"none":"block"},children:t.controls.map((function(t,n){return(0,a.jsxs)("div",{className:v().inputSection,children:[(0,a.jsx)("div",{className:v().controlsSectionName,children:t.sectionName}),(0,a.jsx)("div",{className:v().settingsInputs,children:t.optionList.map((function(t,n){var r,s;if("Symbol"===t.name||"URI"===t.name){var i,o,u,d=null===(i=c[e])||void 0===i?void 0:i.currentControlsState.map((function(t){return t.name})).indexOf("Metadata");if(!1===(null===(o=c[e])||void 0===o||null===(u=o.currentControlsState[d])||void 0===u?void 0:u.state))return}switch(t.type){case"text":return(0,a.jsxs)("div",{className:v().textInput,children:[(0,a.jsxs)("div",{className:v().checkboxContainerNested,children:[(0,a.jsxs)("label",{htmlFor:t.name.split(" ").join("_"),children:[t.name,":"]}),(0,a.jsx)("input",{type:t.type,id:t.name.split(" ").join("_"),name:t.name.split(" ").join("_"),value:null===(r=c[e])||void 0===r?void 0:r.currentControlsState[null===(s=c[e])||void 0===s?void 0:s.currentControlsState.map((function(t){return t.name})).indexOf(t.name)].state,onChange:function(n){var a=(0,x.Z)(c),r=a[e].currentControlsState.map((function(t){return t.name})).indexOf(t.name);a[e].currentControlsState[r].state=n.target.value,l(a)}})]}),t.tooltip&&t.tooltip.length>1?(0,a.jsxs)("div",{className:v().tooltipContainer,children:[(0,a.jsx)("div",{className:v().tooltipInfo,children:t.tooltip}),(0,a.jsx)("img",{className:v().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},n.toString());case"checkbox":return(0,a.jsxs)("label",{className:v().checkboxContainer,children:[(0,a.jsxs)("div",{className:v().checkboxContainerNested,children:[(0,a.jsx)("input",{type:t.type,id:t.name.split(" ").join("_"),name:t.name.split(" ").join("_"),onChange:function(n){var a=(0,x.Z)(c),r=a[e].currentControlsState.map((function(t){return t.name})).indexOf(t.name);a[e].currentControlsState[r].state=n.target.checked,l(a)}}),(0,a.jsx)("span",{children:t.name})]}),t.tooltip&&t.tooltip.length>1?(0,a.jsxs)("div",{className:v().tooltipContainer,children:[(0,a.jsx)("div",{className:v().tooltipInfo,children:t.tooltip}),(0,a.jsx)("img",{className:v().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},n.toString())}}))})]},n.toString())}))},e.toString())}))}),(0,a.jsx)("div",{className:v().contractOutput,children:s.map((function(t,e){return(0,a.jsx)("div",{style:{display:n!==e?"none":"block"},children:(0,a.jsx)(w,{data:c[e]})},e.toString())}))})]})]})}),(0,a.jsxs)("div",{className:v().bottomLinksButtons,children:[(0,a.jsx)("div",{className:v().bottomLinkBtn,children:(0,a.jsx)(o.default,{href:B.co,children:(0,a.jsx)("a",{children:"Documentation"})})}),(0,a.jsx)("div",{className:v().bottomLinkBtn,children:(0,a.jsx)(o.default,{href:B.YA,children:(0,a.jsx)("a",{target:"_blank",children:"Demo"})})})]})]})},M=e(690),I=e.n(M),z=function(){return(0,a.jsxs)("div",{className:I().informationBlockWrapper,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"Openbrush provides:"}),(0,a.jsxs)("div",{className:I().contentWrapper,children:[(0,a.jsxs)("div",{className:I().grid,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(o.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]}),(0,a.jsxs)("div",{className:I().contentUnit,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(o.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]})]}),(0,a.jsxs)("div",{className:I().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]})]}),(0,a.jsxs)("div",{className:I().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]})]}),(0,a.jsx)("div",{className:I().informationBlockWrapperDecor})]})};function E(){return(0,h.useEffect)((function(){_().highlightAll()}),[]),(0,a.jsxs)("div",{children:[(0,a.jsxs)(r.default,{children:[(0,a.jsx)("title",{children:"Openbrush"}),(0,a.jsx)("meta",{name:"keywords",content:"openbrush"}),(0,a.jsx)("meta",{name:"description",content:"openbrush"}),(0,a.jsx)("meta",{name:"google-site-verification",content:"AniwPaa8GCsl_rUlPjd-Po35bxQNLuNPLFYbSohmrhc"})]}),(0,a.jsx)(c,{title:["Smart contracts library for",(0,a.jsx)("span",{style:{color:"#E6007A"},children:" Polkadot "},""),"on",(0,a.jsx)("span",{style:{color:"#B4BE68"},children:" Rust "},"")],illustration:"/img/bannerIllustration.svg"}),(0,a.jsx)(z,{}),(0,a.jsx)(d,{title:"The world\u2019s leading projects trust OpenBrush",data:S}),(0,a.jsx)(f,{title:"Funded by:",data:b}),(0,a.jsx)(W,{})]})}},8581:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return e(3967)}])},2833:function(t){t.exports={bannerContainer:"Banner_bannerContainer__1q1ki",bannerContainerDecorWrapper:"Banner_bannerContainerDecorWrapper__nXf5G",bannerInnerContentHolder:"Banner_bannerInnerContentHolder__1PK8L",headlineBlock:"Banner_headlineBlock__UmnJ1",illustrationConstructor:"Banner_illustrationConstructor__3fBom",brushImg:"Banner_brushImg__1b6LW",illustrationContainer:"Banner_illustrationContainer__2cQk9",ink:"Banner_ink__2uWTn",openbrush:"Banner_openbrush__23cWe",contracts:"Banner_contracts__3SBRS",ctaContainer:"Banner_ctaContainer__31cMt",createdBy:"Banner_createdBy__3hD-t",supercolonyImg:"Banner_supercolonyImg__2eCJ4",leftBottom:"Banner_leftBottom__Y2H1S",rightBottom:"Banner_rightBottom__3hZEn"}},4826:function(t){t.exports={partnersContainer:"FundedBy_partnersContainer__1eAse",logoWrapper:"FundedBy_logoWrapper__uzWxL",partnersContainerDecor:"FundedBy_partnersContainerDecor__2GSA4"}},690:function(t){t.exports={informationBlockWrapper:"Information_informationBlockWrapper__1dkxt",contentWrapper:"Information_contentWrapper__2XeRP",grid:"Information_grid__3wsO4",contentUnit:"Information_contentUnit__1t4Ch",informationBlockWrapperDecor:"Information_informationBlockWrapperDecor__3-VP9"}},8073:function(t){t.exports={partnersContainer:"Partners_partnersContainer__2RzlM",logoWrapper:"Partners_logoWrapper__3wu-0",partnersContainerDecor:"Partners_partnersContainerDecor__2GwuY"}},7246:function(t){t.exports={componentContainer:"Wizard_componentContainer__3zJFA",scrollWrapper:"Wizard_scrollWrapper__2Csdv",wizardWrapper:"Wizard_wizardWrapper__iyNAC",header:"Wizard_header__1HWND",tokenStandardRow:"Wizard_tokenStandardRow__1LGPX",controlsDisplayingController:"Wizard_controlsDisplayingController__1KGvw",open:"Wizard_open__33Pqm",tokenStandard:"Wizard_tokenStandard__3UODM",active:"Wizard_active__2-1H9",actionsRow:"Wizard_actionsRow__PZGP1",copyToClipboard:"Wizard_copyToClipboard__1iVhd",copyIcon:"Wizard_copyIcon__3pho0",body:"Wizard_body__20k8h",contractControls:"Wizard_contractControls__30QNB",closed:"Wizard_closed__dsA3j",inputSection:"Wizard_inputSection__hTxLh",settingsInputs:"Wizard_settingsInputs__WE65c",textInput:"Wizard_textInput__23e6v",checkboxContainerNested:"Wizard_checkboxContainerNested__3Bww1",controlsSectionName:"Wizard_controlsSectionName__3YTE0",checkboxContainer:"Wizard_checkboxContainer__1KL5V",tooltipContainer:"Wizard_tooltipContainer__FbqR4",tooltipInfo:"Wizard_tooltipInfo__DIVgG",infoIcon:"Wizard_infoIcon__2YE8v",contractOutput:"Wizard_contractOutput__11CLG",bottomLinksButtons:"Wizard_bottomLinksButtons__iUU-V",bottomLinkBtn:"Wizard_bottomLinkBtn__3WoPR"}},5345:function(t){t.exports={tabsSwitch:"WizardOutput_tabsSwitch__3-BOf",activeTab:"WizardOutput_activeTab__b4yTQ"}}},function(t){t.O(0,[905,774,888,179],(function(){return n=8581,t(t.s=n);var n}));var n=t.O();_N_E=n}]);