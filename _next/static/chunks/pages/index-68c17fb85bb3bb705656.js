(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{674:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return L}});var a=e(5893),o=e(9008),c=e(2833),i=e.n(c),s=e(1664);function r(n){var t=n.title;n.illustration;return(0,a.jsxs)("div",{className:i().bannerContainer,children:[(0,a.jsxs)("div",{className:i().bannerInnerContentHolder,children:[(0,a.jsx)("div",{className:i().headlineBlock,children:(0,a.jsx)("h1",{children:t})}),(0,a.jsxs)("div",{className:i().illustrationConstructor,children:[(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/ink.svg",alt:"ink"}),(0,a.jsx)("span",{className:i().ink,children:"ink!"})]}),(0,a.jsx)("img",{src:"/img/plus.svg",alt:"plus"}),(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{className:i().brushImg,src:"/img/brush.svg",alt:"brush"}),(0,a.jsx)("span",{className:i().openbrush,children:"OpenBrush"})]}),(0,a.jsx)("img",{src:"/img/equals.svg",alt:"equals"}),(0,a.jsxs)("div",{className:i().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/contract.svg",alt:"ink"}),(0,a.jsx)("span",{className:i().contracts,children:"Smart Contracts"})]})]}),(0,a.jsx)("div",{className:i().ctaContainer,children:(0,a.jsx)(s.default,{href:"/#wizard",children:(0,a.jsx)("a",{onClick:function(n){var t;n.preventDefault(),null===(t=document.getElementById("wizard"))||void 0===t||t.scrollIntoView({behavior:"smooth",block:"start"})},children:"TRY IT OUT"})})})]}),(0,a.jsxs)("p",{className:i().createdBy,children:["created by",(0,a.jsx)("a",{href:"https://www.supercolony.net",target:"_blank",children:(0,a.jsx)("img",{src:"/img/new-supercolony.svg",className:i().supercolonyImg})})]}),(0,a.jsxs)("div",{className:i().bannerContainerDecorWrapper,children:[(0,a.jsx)("div",{className:i().leftBottom}),(0,a.jsx)("div",{className:i().rightBottom,children:(0,a.jsx)("div",{})})]})]})}var l=e(8073),d=e.n(l),u=function(n){var t=n.title,e=n.data;return(0,a.jsxs)("div",{className:d().partnersContainer,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:t}),(0,a.jsx)("div",{className:d().logoWrapper,children:e&&e.map((function(n,t){return(0,a.jsx)(s.default,{href:n.link,children:(0,a.jsx)("a",{children:(0,a.jsx)("img",{src:n.src,alt:n.alt},t)})},t.toString())}))})]})},p=e(4826),m=e.n(p),_=function(n){var t=n.title,e=n.data;return(0,a.jsxs)("div",{className:m().partnersContainer,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:t}),(0,a.jsx)("div",{className:m().logoWrapper,children:e&&e.map((function(n,t){return(0,a.jsx)(s.default,{href:n.link,children:(0,a.jsx)("a",{children:(0,a.jsx)("img",{src:n.src,alt:n.alt},t)})},t.toString())}))})]})},f=e(7294),h=e(5660),v=e.n(h),x=[{alt:"logo",src:"/img/partners/logo6.svg",link:"https://applicature.com/"},{alt:"web3",src:"/img/partners/web3.svg",link:"https://web3.foundation/"},{alt:"alliance",src:"/img/partners/allianceblock.svg",link:"https://allianceblock.io/"},{alt:"astar",src:"/img/partners/astar.svg",link:"https://astar.network/"}],g=[{alt:"web3",src:"/img/funded-by/web3.svg",link:"https://web3.foundation/"},{alt:"alliance",src:"/img/funded-by/allianceblock.svg",link:"https://allianceblock.io/"}],b=e(3143),S=e(7246),j=e.n(S),P=[{name:"psp22",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP22",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP22`] "},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows create `amount` tokens and assigns them to `account`, increasing the total supply"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows token holders to destroy both their own tokens and those that they have an allowance for."},{name:"Wrapper",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to wrap your PSP22 token in a PSP22Wrapper token which can be used for example for governance"},{name:"FlashMint",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows the user to perform a flash loan on the token my minting the borrowd amount and then burning it along with fees for the loan"},{name:"Pausable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to pause all token operations"},{name:"Capped",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to implement with a supply cap, analogue to ERC20Capped"}]}]},{name:"psp1155",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP1155",tooltip:""},{name:"URI",type:"text",initState:"https://...",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP1155`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows minting of new tokens"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows token holders to destroy their tokens"}]}]},{name:"psp34",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP34",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP34`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that exposes the mint function"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that allows token holders to destroy their tokens"},{name:"Enumerable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that allows to iterate over all NFTs"}]}]}],k=e(3961),y=e(4283),w=e(5345),N=e.n(w),C=function(n,t,e,a,o,c,i){var s="".concat(n<"v1.7.0"?'tag = "'.concat(a,'", git = "https://github.com/paritytech/ink"'):'version = "'.concat(a,'"'));return'[package]\nname = "'.concat(t,'"\nversion = "1.0.0"\nedition = "').concat(e,'"\nauthors = ["The best developer ever"]\n\n[dependencies]\nink_primitives = { ').concat(s,", default-features = false }\nink_metadata = { ").concat(s,', default-features = false, features = ["derive"], optional = true }\nink_env = { ').concat(s,", default-features = false }\nink_storage = { ").concat(s,", default-features = false }\nink_lang = { ").concat(s,", default-features = false }\nink_prelude = { ").concat(s,", default-features = false }\nink_engine = { ").concat(s,', default-features = false, optional = true }\n\nscale = { package = "parity-scale-codec", version = "').concat(o,'", default-features = false, features = ["derive"] }\nscale-info = { version = "').concat(c,'", default-features = false, features = ["derive"], optional = true }\n\n# Include brush as a dependency and enable default implementation for PSP22 via brush feature\n').concat(i,'\n\n[lib]\nname = "').concat(t,'"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    "').concat(n>="v2.0.0"?"openbrush":"brush",'/std",\n]\nink-as-dependency = [] ').concat("v1.3.0"==n?"\n[profile.dev]\noverflow-checks = false\n\n[profile.release]\noverflow-checks = false":"")},A={"v1.3.0":{edition:"2018",inkVersion:"v3.0.0-rc6",scaleVersion:"2.1",scaleInfoVersion:"1.0.0",brushDeclaration:function(n){return'brush = { tag = "v1.3.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ['.concat(n,"] }")}},"v1.5.0":{edition:"2021",inkVersion:"v3.0.0",scaleVersion:"3.0",scaleInfoVersion:"2.0.0",brushDeclaration:function(n){return'brush = { tag = "v1.5.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ['.concat(n,"] }")}},"v1.6.0":{edition:"2021",inkVersion:"v3.0.0",scaleVersion:"3.0",scaleInfoVersion:"2.0.0",brushDeclaration:function(n){return'brush = { tag = "v1.6.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ['.concat(n,"] }")}},"v1.7.0":{edition:"2021",inkVersion:"3.1.0",scaleVersion:"3.0",scaleInfoVersion:"2.0.0",brushDeclaration:function(n){return'brush = { tag = "v1.7.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ['.concat(n,"] }")}},"v2.0.0":{edition:"2021",inkVersion:"~3.2.0",scaleVersion:"3",scaleInfoVersion:"2",brushDeclaration:function(n){return'openbrush = { version = "~2.0.0", default-features = false, features = ['.concat(n,"] }")}}},E=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"v2.0.0",e=A[t];switch(n.type){case"psp22":return C(t,"my_"+n.type,e.edition,e.inkVersion,e.scaleVersion,e.scaleInfoVersion,e.brushDeclaration('"psp22"'.concat(n.currentControlsState.find((function(n){return"Pausable"===n.name})).state?', "pausable"':"").concat("ownable"==n.security?', "ownable"':"").concat("access_control"==n.security?', "access_control"':"")));case"psp1155":return C(t,"my_"+n.type,e.edition,e.inkVersion,e.scaleVersion,e.scaleInfoVersion,e.brushDeclaration('"psp1155"'.concat("ownable"==n.security?', "ownable"':"").concat("access_control"==n.security?', "access_control"':"")));case"psp34":return C(t,"my_"+n.type,e.edition,e.inkVersion,e.scaleVersion,e.scaleInfoVersion,e.brushDeclaration('"psp34"'.concat("ownable"==n.security?', "ownable"':"").concat("access_control"==n.security?', "access_control"':"")))}},I=function(n){var t,e,a,o,c,i,s,r,l,d,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"v2.0.0",p=u>="v2.0.0"?"openbrush":"brush",m=null===(t=n.currentControlsState.find((function(n){return"Metadata"===n.name})))||void 0===t?void 0:t.state,_=(null===(e=n.currentControlsState.find((function(n){return"Enumerable"===n.name})))||void 0===e?void 0:e.state)&&u>"v1.5.0",f=null===(a=n.currentControlsState.find((function(n){return"Burnable"===n.name})))||void 0===a?void 0:a.state,h=null===(o=n.currentControlsState.find((function(n){return"Mintable"===n.name})))||void 0===o?void 0:o.state,v=null===(c=n.currentControlsState.find((function(n){return"FlashMint"===n.name})))||void 0===c?void 0:c.state,x=null===(i=n.currentControlsState.find((function(n){return"Pausable"===n.name})))||void 0===i?void 0:i.state,g="ownable"==n.security,b="access_control"==n.security,S=null===(s=n.currentControlsState.find((function(n){return"Wrapper"===n.name})))||void 0===s?void 0:s.state,j=null===(r=n.currentControlsState.find((function(n){return"Capped"===n.name})))||void 0===r?void 0:r.state,P=null===(l=n.currentControlsState.find((function(n){return"Name"===n.name})))||void 0===l?void 0:l.state,k=null===(d=n.currentControlsState.find((function(n){return"Symbol"===n.name})))||void 0===d?void 0:d.state;switch(n.type){case"psp22":return'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n                                \n#['.concat(p,"::contract]\npub mod my_token {\n    // Imports from ink! ").concat(m||j?"\n    use ink_prelude::string::String;":""," ").concat("v1.3.0"!=u?"\n    use ink_storage::traits::SpreadAllocate;":"","\n    \n    // Imports from ").concat(p,"\n    use ").concat(p,"::contracts::psp22::*; ").concat(m?"\n    use ".concat(p,"::contracts::psp22::extensions::metadata::*;"):""," ").concat(f?"\n    use ".concat(p,"::contracts::psp22::extensions::burnable::*;"):""," ").concat(h?"\n    use ".concat(p,"::contracts::psp22::extensions::mintable::*;"):""," ").concat(S?"\n    use ".concat(p,"::contracts::psp22::extensions::wrapper::*;"):""," ").concat(v?"\n    use ".concat(p,"::contracts::psp22::extensions::flashmint::*;"):""," ").concat(x?"\n    use ".concat(p,"::contracts::pausable::*;"):""," ").concat(g?"\n    use ".concat(p,"::contracts::ownable::*;"):""," ").concat(b?"\n    use ".concat(p,"::contracts::access_control::*;"):"","\n\n    #[ink(storage)]\n    #[derive(Default, ").concat("v1.3.0"!==u?"SpreadAllocate, ":"","PSP22Storage").concat(m?", PSP22MetadataStorage":"").concat(S?", PSP22WrapperStorage":"").concat(x?", PausableStorage":"").concat(g?", OwnableStorage":"").concat(b?", AccessControlStorage":"",")]\n    pub struct ").concat(P," {\n        #[PSP22StorageField]\n        psp22: PSP22Data, ").concat(g?"\n        #[OwnableStorageField]\n        ownable: OwnableData,":""," ").concat(m?"\n        #[PSP22MetadataStorageField]\n        metadata: PSP22MetadataData,":""," ").concat(S?"\n        #[PSP22WrapperStorageField]\n        wrapper: PSP22WrapperData,":""," ").concat(x?"\n        #[PausableStorageField]\n        pause: PausableData,":""," ").concat(j?"\n        cap: Balance,":""," ").concat(b?"\n        #[AccessControlStorageField]\n        access_control: AccessControlData,":"","\n    }").concat(b?'\n    \n    // You can add more roles for different purposes\n    const MANAGER: RoleType = ink_lang::selector_id!("MANAGER");\n    ':"","\n\n    // Section contains default implementation without any modifications\n    impl PSP22 for ").concat(P," {} ").concat(m?"\n    impl PSP22Metadata for ".concat(P," {}"):""," ").concat(S?"\n    impl PSP22Wrapper for ".concat(P," {}"):""," ").concat(v?"\n    impl FlashLender for ".concat(P," {}"):""," ").concat(x?"\n    impl Pausable for ".concat(P," {}"):""," ").concat(g?"\n    impl Ownable for ".concat(P," {}"):""," ").concat(b?"\n    impl AccessControl for ".concat(P," {}"):""," ").concat(b||g?"\n    \n    // Section contains modified methods with additional functionality.":""," ").concat(f?"\n    impl PSP22Burnable for ".concat(P," {").concat(b||g?"\n        /// override the `burn` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn burn(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n            self._burn_from(account, amount)\n        }\n    }"):"}"):""," ").concat(h?"\n    impl PSP22Mintable for ".concat(P," {").concat(b||g?"\n        /// override the `mint` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn mint(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n            self._mint(account, amount)\n        }\n    }"):"}"):""," ").concat(j||x?"\n    \n    impl ".concat(u<="v1.5.0"?"PSP22Internal":"PSP22Transfer"," for ").concat(P," {").concat(x?"\n        /// Return `Paused` error if the token is paused\n        #[".concat(p,"::modifiers(when_not_paused)]"):"","\n        fn _before_token_transfer(\n            &mut self,\n            _from: Option<&AccountId>,\n            _to: Option<&AccountId>,\n            _amount: &Balance,\n        ) -> Result<(), PSP22Error> {").concat(j?'\n            // `is_none` means that it is minting\n            if _from.is_none() && (self.total_supply() + _amount) > self.cap() {\n                return Err(PSP22Error::Custom(String::from("Cap exceeded")))\n            }':"","\n            Ok(())\n        }\n    }"):"","\n        \n    impl ").concat(P," {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance").concat(m?", name: Option<String>, symbol: Option<String>, decimal: u8":"").concat(j?", cap: Balance":"",") -> Self {\n            ").concat("v1.3.0"==u?"let mut _instance = Self::default(); ".concat(j?"\n            assert!(_instance._init_cap(cap).is_ok());":""," ").concat(m?"\n            _instance.metadata.name = name;\n            _instance.metadata.symbol = symbol;\n            _instance.metadata.decimals = decimal;":""," ").concat(g?"\n            _instance._init_with_owner(_instance.env().caller());":""," ").concat(b?'\n            _instance._init_with_admin(_instance.env().caller());\n            _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':"","\n            assert!(_instance._mint(_instance.env().caller(), initial_supply).is_ok());\n            _instance"):"ink_lang::codegen::initialize_contract(|_instance: &mut ".concat(P,"| { ").concat(j?"\n                assert!(_instance._init_cap(cap).is_ok());":""," ").concat(m?"\n                _instance.metadata.name = name;\n                _instance.metadata.symbol = symbol;\n                _instance.metadata.decimals = decimal;":"",'\n                _instance\n                    ._mint(_instance.env().caller(), initial_supply)\n                    .expect("Should mint");').concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":""," ").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':"","\n            })"),"\n        } ").concat(x?"\n        \n        #[ink(message)]".concat(g||b?"\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]"):"","\n        pub fn change_state(&mut self) -> Result<(), PSP22Error>  {\n            if self.paused() {\n                self._unpause()\n            } else {\n                self._pause()\n            }\n        }"):""," ").concat(j?"\n        \n        /// Method to return token's cap\n        #[ink(message)]\n        pub fn cap(&self) -> Balance {\n            self.cap\n        }\n\n        /// Initializes the token's cap\n        fn _init_cap(&mut self, cap: Balance) -> Result<(), PSP22Error> {\n            if cap <= 0 {\n                return Err(PSP22Error::Custom(String::from(\"Cap must be above 0\")))\n            }\n            self.cap = cap;\n            Ok(())\n        }":"","\n    }\n}");case"psp1155":return'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#['.concat(p,"::contract]\npub mod my_psp1155 {\n    // Imports from ink! ").concat(m?"\n    use ink_prelude::string::String;":""," ").concat((f||h)&&(g||b)?"\n    use ink_prelude::vec::Vec;":""," ").concat("v1.3.0"!=u?"\n    use ink_storage::traits::SpreadAllocate;":"","\n    \n    // Imports from ").concat(p,"\n    use ").concat(p,"::contracts::psp1155::*; ").concat(m?"\n    use ".concat(p,"::contracts::psp1155::extensions::metadata::*;"):""," ").concat(f?"\n    use ".concat(p,"::contracts::psp1155::extensions::burnable::*;"):""," ").concat(h?"\n    use ".concat(p,"::contracts::psp1155::extensions::mintable::*;"):""," ").concat(g?"\n    use ".concat(p,"::contracts::ownable::*;"):""," ").concat(b?"\n    use ".concat(p,"::contracts::access_control::*;"):"","\n\n    #[ink(storage)]\n    #[derive(Default, ").concat("v1.3.0"!==u?"SpreadAllocate, ":"","PSP1155Storage").concat(m?", PSP1155MetadataStorage":"").concat(g?", OwnableStorage":"").concat(b?", AccessControlStorage":"",")]\n    pub struct ").concat(P," {\n        #[PSP1155StorageField]\n        psp1155: PSP1155Data, ").concat(m?"\n        #[PSP1155MetadataStorageField]\n        metadata: PSP1155MetadataData,":""," ").concat(g?"\n        #[OwnableStorageField]\n        ownable: OwnableData,":""," ").concat(b?"\n        #[AccessControlStorageField]\n        access_control: AccessControlData,":"","\n    }").concat(b?'\n    \n    const MANAGER: RoleType = ink_lang::selector_id!("MANAGER");\n    ':"","\n    \n    // Section contains default implementation without any modifications\n    impl PSP1155 for ").concat(P," {} ").concat(m?"\n    impl PSP1155Metadata for ".concat(P," {}"):""," ").concat(g?"\n    impl Ownable for ".concat(P," {}"):""," ").concat(b?"\n    impl AccessControl for ".concat(P," {}"):""," ").concat(b||g?"\n    \n    // Section contains modified methods with additional functionality.":""," ").concat(f?"\n    impl PSP1155Burnable for ".concat(P," {").concat(b||g?"\n        /// override the `burn` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn burn(&mut self, from: AccountId, ids_amounts: Vec<(Id, Balance)>) -> Result<(), PSP1155Error> {\n            self._burn_from(from, ids_amounts)\n        }\n    }"):"}"):""," ").concat(h?"\n    impl PSP1155Mintable for ".concat(P," {").concat(b||g?"\n        /// override the `mint` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn mint(&mut self, to: AccountId, ids_amounts: Vec<(Id, Balance)>) -> Result<(), PSP1155Error> {\n            self._mint_to(to, ids_amounts)\n        }\n    }"):"}"):"","\n    \n    impl ").concat(P," {\n        #[ink(constructor)]\n        pub fn new(").concat(m?"uri: Option<String>":"",") -> Self {\n            ").concat("v1.3.0"==u?"".concat(m?"let mut _instance = Self::default();\n            _instance.metadata.uri = uri;".concat(g?"_instance._init_with_owner(_instance.env().caller());":"").concat(b?'\n            _instance._init_with_admin(_instance.env().caller()); \n            _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':"","\n            _instance"):"Self::default()"," "):"ink_lang::codegen::initialize_contract(|_instance: &mut Self| {".concat(m?"\n                _instance.metadata.uri = uri;":""," ").concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":""," ").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':"","\n            })"),"\n        }\n    } \n}\n");case"psp34":return'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n                    \n#['.concat(p,"::contract]\npub mod my_psp34 {\n    // Imports from ink! ").concat(m||j?"\n    use ink_prelude::string::String;":""," ").concat("v1.3.0"!=u?"\n    use ink_storage::traits::SpreadAllocate;":"","\n    \n    // Imports from ").concat(p,"\n    use ").concat(p,"::contracts::psp34::*; ").concat(m?"\n    use ".concat(p,"::contracts::psp34::extensions::metadata::*;"):""," ").concat(_?"\n    use ".concat(p,"::contracts::psp34::extensions::enumerable::*;"):""," ").concat(f?"\n    use ".concat(p,"::contracts::psp34::extensions::burnable::*;"):""," ").concat(h?"\n    use ".concat(p,"::contracts::psp34::extensions::mintable::*;"):""," ").concat(g?"\n    use ".concat(p,"::contracts::ownable::*;"):""," ").concat(b?"\n    use ".concat(p,"::contracts::access_control::*;"):"","\n    \n    #[derive(Default, ").concat("v1.3.0"!==u?"SpreadAllocate, ":"","PSP34Storage").concat(m?", PSP34MetadataStorage":"").concat(_?", PSP34EnumerableStorage":"").concat(g?", OwnableStorage":"").concat(b?", AccessControlStorage":"",")]\n    #[ink(storage)]\n    pub struct ").concat(P,"{\n        #[PSP34StorageField]\n        psp34: PSP34Data, ").concat(m?"\n        #[PSP34MetadataStorageField]\n        metadata: PSP34MetadataData,":""," ").concat(_?"\n        #[PSP34EnumerableStorageField]\n        enumerable: PSP34EnumerableData,":""," ").concat(g?"\n        #[OwnableStorageField]\n        ownable: OwnableData,":""," ").concat(b?"\n        #[AccessControlStorageField]\n        access_control: AccessControlData,":"","\n    }").concat(b?'\n    \n    const MANAGER: RoleType = ink_lang::selector_id!("MANAGER");':"","\n\n    // Section contains default implementation without any modifications\n    impl PSP34 for ").concat(P," {} ").concat(m?"\n    impl PSP34Metadata for ".concat(P," {}"):""," ").concat(_?"\n    impl PSP34Enumerable for ".concat(P," {}"):""," ").concat(g?"\n    impl Ownable for ".concat(P," {}"):""," ").concat(b?"\n    impl AccessControl for ".concat(P," {}"):""," ").concat(b||g?"\n    \n    // Section contains modified methods with additional functionality.":""," ").concat(f?"\n    impl PSP34Burnable for ".concat(P," {").concat(b||g?"\n        /// override the `burn` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn burn(&mut self, account: AccountId, id: Id) -> Result<(), PSP34Error> {\n        self._burn_from(account, id)\n        }\n    }"):"}"):""," ").concat(h?"\n    impl PSP34Mintable for ".concat(P," {").concat(b||g?"\n        /// override the `mint` function to add the access modifier\n        #[ink(message)]\n        #[".concat(p,"::modifiers(").concat(g?"only_owner":"only_role(MANAGER)",")]\n        fn mint(&mut self, account: AccountId, id: Id) -> Result<(), PSP34Error> {\n            self._mint_to(account, id)\n        }\n    }"):"}"):"","\n    \n    impl ").concat(P," {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            ").concat("1.3.0"==u?"".concat(m?'let mut _instance = Self::default();\n            let collection_id = _instance.collection_id();\n            _instance._set_attribute(collection_id.clone(), String::from("name").into_bytes(), String::from("'.concat(P,'").into_bytes());\n            _instance._set_attribute(collection_id, String::from("symbol").into_bytes(), String::from("').concat(k,'").into_bytes());').concat(h?'\n            _instance._mint_to(_instance.env().caller(), Id::U8(1)).expect("Can mint");'.concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":"").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':""):"","\n            _instance"):"let mut _instance = Self::default()".concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":"").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller().expect("Should grant MANAGER role");':"","\n                _instance")):"ink_lang::codegen::initialize_contract(|_instance: &mut Self| {".concat(m?'\n                let collection_id = _instance.collection_id();\n                _instance._set_attribute(collection_id.clone(), String::from("name").into_bytes(), String::from("'.concat(P,'").into_bytes());\n                _instance._set_attribute(collection_id, String::from("symbol").into_bytes(), String::from("').concat(k,'").into_bytes());').concat(h?'\n                _instance._mint_to(_instance.env().caller(), Id::U8(1)).expect("Can mint");':"").concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":"").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':""):"".concat(g?"\n                _instance._init_with_owner(_instance.env().caller());":"").concat(b?'\n                _instance._init_with_admin(_instance.env().caller()); \n                _instance.grant_role(MANAGER, _instance.env().caller()).expect("Should grant MANAGER role");':""),"\n            })"),"\n        }\n    }\n}")}},W=function(n){var t=n.data,e=(0,f.useState)(t),o=e[0],c=e[1],i=(0,f.useState)("rust"),s=i[0],r=i[1];if((0,f.useEffect)((function(){c(t)}),[t,o]),o)switch(o.type){case"psp22":case"psp1155":return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:N().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return r("rust")},className:"rust"===s?N().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return r("toml")},className:"toml"===s?N().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsxs)("div",{className:N().mainContent,children:[(0,a.jsx)("div",{className:j().copyToClipboard,onClick:function(){"rust"==s?navigator.clipboard.writeText(I(o,o.version)):navigator.clipboard.writeText(E(o,o.version))},children:(0,a.jsx)("img",{className:j().copyIcon,src:"/icons/copy.svg",alt:"logo"})}),"rust"===s?(0,a.jsx)(k.Z,{language:"rust",wrapLongLines:!0,style:y.YC,children:I(o,o.version)}):(0,a.jsx)(k.Z,{language:"toml",wrapLongLines:!0,style:y.YC,children:E(o,o.version)})]})]});case"psp34":return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:N().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return r("rust")},className:"rust"===s?N().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return r("toml")},className:"toml"===s?N().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsxs)("div",{className:N().mainContent,children:[(0,a.jsx)("div",{className:j().copyToClipboard,onClick:function(){"rust"==s?navigator.clipboard.writeText(I(o,o.version)):navigator.clipboard.writeText(E(o,o.version))},children:(0,a.jsx)("img",{className:j().copyIcon,src:"/icons/copy.svg",alt:"logo"})}),"rust"===s?(0,a.jsx)(k.Z,{language:"rust",wrapLongLines:!0,style:y.YC,children:I(o,o.version)}):(0,a.jsx)(k.Z,{language:"toml",wrapLongLines:!0,style:y.YC,children:E(o,o.version)})]})]})});default:return(0,a.jsx)(a.Fragment,{})}return(0,a.jsx)(a.Fragment,{})},B=e(1233),M=e(5733),R=e.n(M),z=e(3162),D=e.n(z),O=function(n){var t=n.data,e=(0,f.useState)(t),o=e[0],c=e[1];return(0,f.useEffect)((function(){c(t)}),[t,o]),(0,a.jsxs)("div",{className:j().download,onClick:function(){return function(n){console.log(n);var t=E(n),e=I(n),a=new(R());a.file("Cargo.toml",t),a.file("lib.rs",e),a.generateAsync({type:"blob"}).then((function(t){D().saveAs(t,"".concat(n.type,".zip"))}))}(o)},children:[(0,a.jsx)("img",{className:j().copyIcon,src:"/icons/download.svg",alt:"logo"}),"Download"]})},T=function(){var n=(0,f.useState)(0),t=n[0],e=n[1],o=(0,f.useState)(P),c=o[0],i=(o[1],(0,f.useState)([])),r=i[0],l=i[1],d=(0,f.useState)(!1),u=d[0];d[1];return(0,f.useEffect)((function(){var n=[];c.forEach((function(t,e){n.push({type:t.name,currentControlsState:[]}),t.controls.forEach((function(t){t.optionList.forEach((function(t){n[e].currentControlsState.push({name:t.name,state:t.initState})}))}))})),l(n)}),[c]),(0,a.jsxs)("div",{className:j().componentContainer,id:"wizard",children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"How to use: "}),(0,a.jsx)("div",{className:j().scrollWrapper,children:(0,a.jsxs)("div",{className:j().wizardWrapper,children:[(0,a.jsxs)("div",{className:j().header,children:[(0,a.jsxs)("div",{className:j().tokenStandardRow,children:[(0,a.jsx)("div",{className:"".concat(j().controlsDisplayingController," ").concat(u?"":j().open),onClick:function(){return setControlsClosed(!u)},children:(0,a.jsx)("img",{src:"/icons/arrowDown.svg",alt:"icon"})}),c.map((function(n,o){return(0,a.jsx)("div",{onClick:function(){e(o)},className:t===o?"".concat(j().active," ").concat(j().tokenStandard):"".concat(j().tokenStandard),children:n.name},o.toString())}))]}),(0,a.jsx)("div",{className:j().actionsRow,children:c.map((function(n,e){return(0,a.jsx)("div",{style:{display:t!==e?"none":"block"},children:(0,a.jsx)(O,{data:r[e]})},e.toString())}))})]}),(0,a.jsxs)("div",{className:j().body,children:[(0,a.jsxs)("div",{className:u?"".concat(j().contractControls," ").concat(j().closed):"".concat(j().contractControls),children:[c.map((function(n,e){return(0,a.jsxs)("div",{style:{display:t!==e?"none":"block"},children:[(0,a.jsxs)("div",{className:j().versionSelectorWrapper,children:[(0,a.jsx)("h3",{className:j().controlsSectionName,children:"Version"}),(0,a.jsxs)("select",{className:j().select,onChange:function(n){var t=(0,b.Z)(r);t[e].version=n.target.value,l(t)},defaultValue:"v2.0.0",children:[(0,a.jsx)("option",{value:"v2.0.0",children:"v2.0.0"}),(0,a.jsx)("option",{value:"v1.7.0",children:"v1.7.0"}),(0,a.jsx)("option",{value:"v1.6.0",children:"v1.6.0"}),(0,a.jsx)("option",{value:"v1.5.0",children:"v1.5.0"}),(0,a.jsx)("option",{value:"v1.3.0",children:"v1.3.0"})]})]}),n.controls.map((function(n,t){return(0,a.jsxs)("div",{className:j().inputSection,children:[(0,a.jsx)("div",{className:j().controlsSectionName,children:n.sectionName}),(0,a.jsx)("div",{className:j().settingsInputs,children:n.optionList.map((function(n,t){var o,c;if("Symbol"===n.name||"URI"===n.name){var i,s,d,u=null===(i=r[e])||void 0===i?void 0:i.currentControlsState.map((function(n){return n.name})).indexOf("Metadata");if(!1===(null===(s=r[e])||void 0===s||null===(d=s.currentControlsState[u])||void 0===d?void 0:d.state))return}switch(n.type){case"text":return(0,a.jsxs)("div",{className:j().textInput,children:[(0,a.jsxs)("div",{className:j().checkboxContainerNested,children:[(0,a.jsxs)("label",{htmlFor:n.name.split(" ").join("_"),children:[n.name,":"]}),(0,a.jsx)("input",{type:n.type,id:n.name.split(" ").join("_"),name:n.name.split(" ").join("_"),value:null===(o=r[e])||void 0===o?void 0:o.currentControlsState[null===(c=r[e])||void 0===c?void 0:c.currentControlsState.map((function(n){return n.name})).indexOf(n.name)].state,onChange:function(t){var a=(0,b.Z)(r),o=a[e].currentControlsState.map((function(n){return n.name})).indexOf(n.name);a[e].currentControlsState[o].state=t.target.value,l(a)}})]}),n.tooltip&&n.tooltip.length>1?(0,a.jsxs)("div",{className:j().tooltipContainer,children:[(0,a.jsx)("div",{className:j().tooltipInfo,children:n.tooltip}),(0,a.jsx)("img",{className:j().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},t.toString());case"checkbox":return(0,a.jsxs)("label",{className:j().checkboxContainer,children:[(0,a.jsxs)("div",{className:j().checkboxContainerNested,children:[(0,a.jsx)("input",{type:n.type,id:n.name.split(" ").join("_"),name:n.name.split(" ").join("_"),onChange:function(t){var a=(0,b.Z)(r),o=a[e].currentControlsState.map((function(n){return n.name})).indexOf(n.name);a[e].currentControlsState[o].state=t.target.checked,l(a)}}),(0,a.jsx)("span",{children:n.name})]}),n.tooltip&&n.tooltip.length>1?(0,a.jsxs)("div",{className:j().tooltipContainer,children:[(0,a.jsx)("div",{className:j().tooltipInfo,children:n.tooltip}),(0,a.jsx)("img",{className:j().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},t.toString())}}))})]},t.toString())}))]},e.toString())})),c.map((function(n,e){return(0,a.jsx)("div",{style:{display:t!==e?"none":"block"},children:(0,a.jsxs)("div",{className:j().versionSelectorWrapper,children:[(0,a.jsx)("h3",{className:j().controlsSectionName,children:"Security"}),(0,a.jsxs)("select",{className:j().select,onChange:function(n){var t=(0,b.Z)(r);t[e].security=n.target.value,l(t)},defaultValue:"none",children:[(0,a.jsx)("option",{value:"none",children:"None"}),(0,a.jsx)("option",{value:"ownable",children:"Ownable"}),(0,a.jsx)("option",{value:"access_control",children:"Access Control"})]})]})},e.toString())}))]}),(0,a.jsx)("div",{className:j().contractOutput,children:c.map((function(n,e){return(0,a.jsx)("div",{style:{display:t!==e?"none":"block"},children:(0,a.jsx)(W,{data:r[e]})},e.toString())}))})]})]})}),(0,a.jsxs)("div",{className:j().bottomLinksButtons,children:[(0,a.jsx)("div",{className:j().bottomLinkBtn,children:(0,a.jsx)(s.default,{href:B.co,children:(0,a.jsx)("a",{children:"Documentation"})})}),(0,a.jsx)("div",{className:j().bottomLinkBtn,children:(0,a.jsx)(s.default,{href:B.YA,children:(0,a.jsx)("a",{target:"_blank",children:"Demo"})})})]})]})},G=e(690),F=e.n(G),V=function(){return(0,a.jsxs)("div",{className:F().informationBlockWrapper,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"Openbrush provides:"}),(0,a.jsxs)("div",{className:F().contentWrapper,children:[(0,a.jsxs)("div",{className:F().grid,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(s.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]}),(0,a.jsxs)("div",{className:F().contentUnit,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(s.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]})]}),(0,a.jsxs)("div",{className:F().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]})]}),(0,a.jsxs)("div",{className:F().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]})]}),(0,a.jsx)("div",{className:F().informationBlockWrapperDecor})]})};function L(){return(0,f.useEffect)((function(){v().highlightAll()}),[]),(0,a.jsxs)("div",{children:[(0,a.jsxs)(o.default,{children:[(0,a.jsx)("title",{children:"Openbrush"}),(0,a.jsx)("meta",{name:"keywords",content:"openbrush"}),(0,a.jsx)("meta",{name:"description",content:"openbrush"}),(0,a.jsx)("meta",{name:"google-site-verification",content:"AniwPaa8GCsl_rUlPjd-Po35bxQNLuNPLFYbSohmrhc"})]}),(0,a.jsx)(r,{title:["Smart contracts library for",(0,a.jsx)("span",{style:{color:"#E6007A"},children:" Polkadot "},""),"on",(0,a.jsx)("span",{style:{color:"#B4BE68"},children:" Rust "},"")],illustration:"/img/bannerIllustration.svg"}),(0,a.jsx)(V,{}),(0,a.jsx)(u,{title:"The world\u2019s leading projects trust OpenBrush",data:x}),(0,a.jsx)(_,{title:"Funded by:",data:g}),(0,a.jsx)(T,{})]})}},8581:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return e(674)}])},2833:function(n){n.exports={bannerContainer:"Banner_bannerContainer__1q1ki",bannerContainerDecorWrapper:"Banner_bannerContainerDecorWrapper__nXf5G",bannerInnerContentHolder:"Banner_bannerInnerContentHolder__1PK8L",headlineBlock:"Banner_headlineBlock__UmnJ1",illustrationConstructor:"Banner_illustrationConstructor__3fBom",brushImg:"Banner_brushImg__1b6LW",illustrationContainer:"Banner_illustrationContainer__2cQk9",ink:"Banner_ink__2uWTn",openbrush:"Banner_openbrush__23cWe",contracts:"Banner_contracts__3SBRS",ctaContainer:"Banner_ctaContainer__31cMt",createdBy:"Banner_createdBy__3hD-t",supercolonyImg:"Banner_supercolonyImg__2eCJ4",leftBottom:"Banner_leftBottom__Y2H1S",rightBottom:"Banner_rightBottom__3hZEn"}},4826:function(n){n.exports={partnersContainer:"FundedBy_partnersContainer__1eAse",logoWrapper:"FundedBy_logoWrapper__uzWxL",partnersContainerDecor:"FundedBy_partnersContainerDecor__2GSA4"}},690:function(n){n.exports={informationBlockWrapper:"Information_informationBlockWrapper__1dkxt",contentWrapper:"Information_contentWrapper__2XeRP",grid:"Information_grid__3wsO4",contentUnit:"Information_contentUnit__1t4Ch",informationBlockWrapperDecor:"Information_informationBlockWrapperDecor__3-VP9"}},8073:function(n){n.exports={partnersContainer:"Partners_partnersContainer__2RzlM",logoWrapper:"Partners_logoWrapper__3wu-0",partnersContainerDecor:"Partners_partnersContainerDecor__2GwuY"}},7246:function(n){n.exports={componentContainer:"Wizard_componentContainer__3zJFA",scrollWrapper:"Wizard_scrollWrapper__2Csdv",wizardWrapper:"Wizard_wizardWrapper__iyNAC",header:"Wizard_header__1HWND",tokenStandardRow:"Wizard_tokenStandardRow__1LGPX",controlsDisplayingController:"Wizard_controlsDisplayingController__1KGvw",open:"Wizard_open__33Pqm",tokenStandard:"Wizard_tokenStandard__3UODM",active:"Wizard_active__2-1H9",actionsRow:"Wizard_actionsRow__PZGP1",download:"Wizard_download__25BXT",copyIcon:"Wizard_copyIcon__3pho0",body:"Wizard_body__20k8h",versionSelectorWrapper:"Wizard_versionSelectorWrapper__YFjup",select:"Wizard_select__h2o33",copyToClipboard:"Wizard_copyToClipboard__1iVhd",contractControls:"Wizard_contractControls__30QNB",closed:"Wizard_closed__dsA3j",inputSection:"Wizard_inputSection__hTxLh",settingsInputs:"Wizard_settingsInputs__WE65c",textInput:"Wizard_textInput__23e6v",checkboxContainerNested:"Wizard_checkboxContainerNested__3Bww1",controlsSectionName:"Wizard_controlsSectionName__3YTE0",checkboxContainer:"Wizard_checkboxContainer__1KL5V",tooltipContainer:"Wizard_tooltipContainer__FbqR4",tooltipInfo:"Wizard_tooltipInfo__DIVgG",infoIcon:"Wizard_infoIcon__2YE8v",contractOutput:"Wizard_contractOutput__11CLG",bottomLinksButtons:"Wizard_bottomLinksButtons__iUU-V",bottomLinkBtn:"Wizard_bottomLinkBtn__3WoPR"}},5345:function(n){n.exports={tabsSwitch:"WizardOutput_tabsSwitch__3-BOf",activeTab:"WizardOutput_activeTab__b4yTQ"}}},function(n){n.O(0,[879,774,888,179],(function(){return t=8581,n(n.s=t);var t}));var t=n.O();_N_E=t}]);