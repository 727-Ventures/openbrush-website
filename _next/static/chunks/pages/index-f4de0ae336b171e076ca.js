(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{1413:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return M}});var a=e(5893),r=e(9008),s=e(2833),o=e.n(s),i=e(1664),c=e(7294),l=function(n){var t=n.title,e=(n.illustration,(0,c.useState)(null)),r=e[0],s=e[1];(0,c.useEffect)((function(){s(document.getElementById("wizard"))}),[]);return(0,a.jsxs)("div",{className:o().bannerContainer,children:[(0,a.jsx)("div",{className:o().bannerInnerContentHolder,children:(0,a.jsx)("div",{children:(0,a.jsxs)("div",{children:[(0,a.jsx)("div",{className:o().headlineBlock,children:(0,a.jsx)("h1",{children:t})}),(0,a.jsxs)("div",{className:o().illustrationConstructor,children:[(0,a.jsxs)("div",{className:o().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/ink.svg",alt:"ink"}),(0,a.jsx)("span",{className:o().ink,children:"ink!"})]}),(0,a.jsx)("img",{src:"/img/plus.svg",alt:"plus"}),(0,a.jsxs)("div",{className:o().illustrationContainer,children:[(0,a.jsx)("img",{className:o().brushImg,src:"/img/brush.svg",alt:"brush"}),(0,a.jsx)("span",{className:o().openbrush,children:"OpenBrush"})]}),(0,a.jsx)("img",{src:"/img/equals.svg",alt:"equals"}),(0,a.jsxs)("div",{className:o().illustrationContainer,children:[(0,a.jsx)("img",{src:"/img/contract.svg",alt:"ink"}),(0,a.jsx)("span",{className:o().contracts,children:"Smart Contracts"})]})]})]})})}),(0,a.jsx)("div",{className:o().ctaContainer,children:(0,a.jsx)(i.default,{href:"/#wizard",children:(0,a.jsx)("a",{onClick:function(n){n.preventDefault(),r.scrollIntoView({behavior:"smooth",block:"start"})},children:"TRY IT OUT"})})}),(0,a.jsxs)("div",{className:o().bannerContainerDecorWrapper,children:[(0,a.jsx)("div",{className:o().leftBottom}),(0,a.jsx)("div",{className:o().rightBottom,children:(0,a.jsx)("div",{})})]})]})},u=e(8073),d=e.n(u),m=function(n){var t=n.title,e=n.data;return(0,a.jsxs)("div",{className:d().partnersContainer,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:t}),(0,a.jsx)("div",{className:d().logoWrapper,children:e&&e.map((function(n,t){return(0,a.jsx)(i.default,{href:n.link,children:(0,a.jsx)("a",{children:(0,a.jsx)("img",{src:n.src,alt:n.alt},t)})},t.toString())}))})]})},p=e(5660),f=e.n(p),h=[{alt:"logo",src:"/img/partners/logo8.svg",link:"https://www.zokyo.io/"},{alt:"logo",src:"/img/partners/logo6.svg",link:"https://applicature.com/"},{alt:"alliance",src:"/img/partners/alliance.png",link:"https://allianceblock.io/"},{alt:"web3",src:"/img/partners/web3.svg",link:"https://web3.foundation/"}],S=e(3143),g=e(7246),_=e.n(g),b=[{name:"psp22",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP22",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""},{name:"Premint",type:"text",initState:"100",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP22`] "},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows create `amount` tokens and assigns them to `account`, increasing the total supply"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows token holders to destroy both their own tokens and those that they have an allowance for."},{name:"Wrapper",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to wrap your PSP22 token in a PSP22Wrapper token which can be used for example for governance"},{name:"FlashMint",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows the user to perform a flash loan on the token my minting the borrowd amount and then burning it along with fees for the loan"},{name:"Pausable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to pause all token operations"},{name:"Capped",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP22`] that allows you to implement with a supply cap, analogue to ERC20Capped"}]}]},{name:"psp1155",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP1155",tooltip:""},{name:"URI",type:"text",initState:"https://...",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP1155`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows minting of new tokens"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP1155`] that allows token holders to destroy their tokens"}]}]},{name:"psp34",controls:[{sectionName:"Constructor",optionList:[{name:"Name",type:"text",initState:"MyPSP34",tooltip:""},{name:"Symbol",type:"text",initState:"MPSP",tooltip:""}]},{sectionName:"Extensions",optionList:[{name:"Metadata",type:"checkbox",initState:!1,tooltip:"Metadata for [`PSP34`]"},{name:"Mintable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that exposes the mint function"},{name:"Burnable",type:"checkbox",initState:!1,tooltip:"Extension of [`PSP34`] that allows token holders to destroy their tokens"}]}]}],x=e(3961),k=e(4283),v=e(5345),j=e.n(v),P=function(n){var t=n.data,e=(0,c.useState)(t),r=e[0],s=e[1],o=(0,c.useState)("rust"),i=o[0],l=o[1];if((0,c.useEffect)((function(){s(t)}),[t,r]),r)switch(r.type){case"psp22":return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:j().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return l("rust")},className:"rust"===i?j().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return l("toml")},className:"toml"===i?j().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:j().mainContent,children:"rust"===i?(0,a.jsx)(x.Z,{language:"rust",wrapLongLines:!0,style:k.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n                                \n#[brush::contract]\npub mod my_token {\n    use ink_prelude::string::String; \n    use brush::contracts::psp22::*; '.concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    use brush::contracts::psp22::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    use brush::contracts::psp22::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    use brush::contracts::psp22::extensions::mintable::*;":""," ").concat(r.currentControlsState.find((function(n){return"Wrapper"===n.name})).state?"\n    use brush::contracts::psp22::extensions::wrapper::*;":""," ").concat(r.currentControlsState.find((function(n){return"FlashMint"===n.name})).state?"\n    use brush::contracts::psp22::extensions::flashmint::*;":""," ").concat(r.currentControlsState.find((function(n){return"Pausable"===n.name})).state?"\n    use brush::{\n        contracts::pausable::*,\n        modifiers,\n    };":"","\n\n    #[ink(storage)]\n    #[derive(Default, PSP22Storage").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?", PSP22MetadataStorage":"").concat(r.currentControlsState.find((function(n){return"Wrapper"===n.name})).state?", PSP22WrapperStorage":"").concat(r.currentControlsState.find((function(n){return"Pausable"==n.name})).state?", PausableStorage":"",")]\n    pub struct ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {\n        #[PSP22StorageField]\n        psp22: PSP22Data, ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n        #[PSP22MetadataStorageField]\n        metadata: PSP22MetadataData,":""," ").concat(r.currentControlsState.find((function(n){return"Wrapper"===n.name})).state?"\n        #[PSP22WrapperStorageField]\n        wrapper: PSP22WrapperData,":""," ").concat(r.currentControlsState.find((function(n){return"Pausable"===n.name})).state?"\n        #[PausableStorageField]\n        pause: PausableData,":""," ").concat(r.currentControlsState.find((function(n){return"Capped"===n.name})).state?"\n        cap: Balance,":"","\n    }\n        \n    impl PSP22 for ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {} ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    impl PSP22Metadata for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    impl PSP22Burnable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    impl PSP22Mintable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Wrapper"===n.name})).state?"\n    impl PSP22Wrapper for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"FlashMint"===n.name})).state?"\n    impl FlashLender for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Pausable"===n.name})).state?"\n    impl Pausable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):"","\n        \n    impl ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?", name: Option<String>, symbol: Option<String>, decimal: u8":"").concat(r.currentControlsState.find((function(n){return"Capped"===n.name})).state?", cap: Balance":"",") -> Self {\n            let mut instance = Self::default(); ").concat(r.currentControlsState.find((function(n){return"Capped"===n.name})).state?"\n            assert!(instance.init_cap(cap).is_ok());":""," ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n            instance.metadata.name = name;\n            instance.metadata.symbol = symbol;\n            instance.metadata.decimals = decimal;":"","\n            assert!(instance._mint(instance.env().caller(), initial_supply).is_ok());\n            instance\n        }  ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n            \n        #[ink(message)]\n        pub fn burn_from_many(&mut self, accounts: Vec<(AccountId, Balance)>) {\n            for account in accounts.iter() {\n                self.burn(account.0, account.1);\n            }\n        }":""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n            \n        #[ink(message)]\n        pub fn mint_to(&mut self, account: AccountId, amount: Balance) {\n            self.mint(account, amount);\n        }":""," ").concat(r.currentControlsState.find((function(n){return"Pausable"===n.name})).state?"\n        \n        #[ink(message)]\n        pub fn change_state(&mut self) -> Result<(), PSP22Error> {\n            if self.paused() {\n                self._unpause()\n            } else {\n                self._pause()\n            }\n        }":""," ").concat(r.currentControlsState.find((function(n){return"Capped"===n.name})).state?'\n        \n        /// Method to return token\'s cap\n        #[ink(message)]\n        pub fn cap(&self) -> Balance {\n            self.cap\n        }\n        \n        /// Overrides the `_mint` function to check for cap overflow before minting tokens\n        /// Performs `PSP22::_mint` after the check succeeds\n        fn _mint(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n            if (self.total_supply() + amount) > self.cap() {\n                return Err(PSP22Error::Custom(String::from("Cap exceeded")))\n            }\n            PSP22::_mint(self, account, amount)\n        }\n\n        /// Initializes the token\'s cap\n        fn init_cap(&mut self, cap: Balance) -> Result<(), PSP22Error> {\n            if cap <= 0 {\n                return Err(PSP22Error::Custom(String::from("Cap must be above 0")))\n            }\n            self.cap = cap;\n            Ok(())\n        }':"","\n    }\n}")}):(0,a.jsx)(x.Z,{language:"toml",wrapLongLines:!0,style:k.YC,children:'[package]\nname = "my_token"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# Include brush as a dependency and enable default implementation for PSP22 via brush feature\nbrush = { tag = "v1.2.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp22"'.concat(r.currentControlsState.find((function(n){return"Pausable"===n.name})).state?', "pausable"':"",'] }\n\n[lib]\nname = "my_psp22"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    "brush/std",\n]\n')})})]});case"psp1155":return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:j().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return l("rust")},className:"rust"===i?j().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return l("toml")},className:"toml"===i?j().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:j().mainContent,children:"rust"===i?(0,a.jsx)(x.Z,{language:"rust",wrapLongLines:!0,style:k.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n\n#[brush::contract]\npub mod my_psp1155 {\n    use ink_prelude::{\n        string::String,\n        vec,\n    };\n    use brush::contracts::psp1155::*; '.concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    use brush::contracts::psp1155::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    use brush::contracts::psp1155::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    use brush::contracts::psp22::extensions::mintable::*;":"","\n\n    #[ink(storage)]\n    #[derive(Default, PSP1155Storage").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?", PSP1155MetadataStorage":"",")]\n    pub struct ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {\n        #[PSP1155StorageField]\n        psp1155: PSP1155Data, ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n        #[PSP1155MetadataStorageField]\n        metadata: PSP1155MetadataData,":"","  \n    }\n    \n    impl PSP1155 for ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {} ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    impl PSP1155Metadata for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    impl PSP1155Burnable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    impl PSP1155Mintable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):"","\n    \n    impl ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {\n        #[ink(constructor)]\n        pub fn new(").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"uri: Option<String>":"",") -> Self {\n            ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"let mut instance = Self::default();\n            instance.metadata.uri = uri;\n            instance":"Self::default()",'\n        }\n\n        #[ink(message)]\n        pub fn deny(&mut self, id: Id) {\n            self.denied_ids.insert(id, ());\n        }\n\n        #[ink(message)]\n        pub fn mint_tokens(&mut self, id: Id, amount: Balance) -> Result<(), PSP1155Error> {\n            if self.denied_ids.get(&id).is_some() {\n                return Err(PSP1155Error::Custom(String::from("Id is denied")))\n            }\n            self._mint_to(Self::env().caller(), vec![(id, amount)])\n        }\n        ').concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n        #[ink(message)]\n        pub fn mint_tokens(&mut self, id: Id, amount: Balance) {\n            assert!(*self.registered_ids.get(&id).unwrap_or(&false));\n            self.mint(id, amount);\n        }":"","\n    } \n}\n")}):(0,a.jsx)(x.Z,{language:"toml",wrapLongLines:!0,style:k.YC,children:'[package]\nname = "my_psp1155"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\nbrush = { tag = "v1.2.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp1155"] }\n\n[lib]\nname = "my_psp1155"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    # These dependencies\n    "brush/std",\n]\nink-as-dependency = []'})})]});case"psp34":return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:j().tabsSwitch,children:[(0,a.jsx)("div",{onClick:function(){return l("rust")},className:"rust"===i?j().activeTab:"",children:"lib.rs"}),(0,a.jsx)("div",{onClick:function(){return l("toml")},className:"toml"===i?j().activeTab:"",children:"Cargo.toml"})]}),(0,a.jsx)("div",{className:j().mainContent,children:"rust"===i?(0,a.jsx)(x.Z,{language:"rust",wrapLongLines:!0,style:k.YC,children:'#![cfg_attr(not(feature = "std"), no_std)]\n                    \n#[brush::contract]\npub mod my_psp34 {\n    use ink_prelude::string::String;\n    use brush::contracts::psp34::*; '.concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    use brush::contracts::psp34::extensions::metadata::*;":""," ").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    use brush::contracts::psp34::extensions::burnable::*;":""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    use brush::contracts::psp34::extensions::mintable::*;":"","\n    \n\n    #[derive(Default, PSP34Storage").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?", PSP34MetadataStorage":"",")]\n    #[ink(storage)]\n    pub struct ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state,"{\n        #[PSP34StorageField]\n        psp34: PSP34Data,\n        next_id: u8, ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n        #[PSP34MetadataStorageField]\n        metadata: PSP34MetadataData,":"","\n    }\n\n    impl PSP34 for ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}").concat(r.currentControlsState.find((function(n){return"Burnable"===n.name})).state?"\n    impl PSP34Burnable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n    impl PSP34Mintable for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):""," ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?"\n    impl PSP34Metadata for ".concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}\n    impl PSP34Internal for ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {}"):"","\n\n    impl ").concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state," {\n        #[ink(constructor)]\n        pub fn new(id: Id) -> Self {\n            ").concat(r.currentControlsState.find((function(n){return"Metadata"===n.name})).state?'let mut instance = Self::default();\n            instance._set_attribute(id.clone(), String::from("name").into_bytes(), String::from("'.concat(r.currentControlsState.find((function(n){return"Name"===n.name})).state,'").into_bytes());\n            instance._set_attribute(id, String::from("symbol").into_bytes(), String::from("').concat(r.currentControlsState.find((function(n){return"Symbol"===n.name})).state,'").into_bytes());').concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n            instance.mint_token();":"","\n            instance"):"Self::default()","\n        } ").concat(r.currentControlsState.find((function(n){return"Mintable"===n.name})).state?"\n        /// Mint method which mints a token and updates the id of next token\n        #[ink(message)]\n        pub fn mint_token(&mut self) {\n            self.mint(Id::U8(self.next_id));\n            self.next_id += 1;\n        }":"","\n    }\n}")}):(0,a.jsx)(x.Z,{language:"toml",wrapLongLines:!0,style:k.YC,children:'[package]\nname = "my_psp34"\nversion = "1.0.0"\nedition = "2018"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\nbrush = { tag = "v1.2.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp34"] }\n\n[lib]\nname = "my_psp34"\npath = "lib.rs"\ncrate-type = [\n    # Used for normal contract Wasm blobs.\n    "cdylib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    # These dependencies\n    "brush/std",\n]\nink-as-dependency = []'})})]})});default:return(0,a.jsx)(a.Fragment,{})}return(0,a.jsx)(a.Fragment,{})},C=e(1233),y=function(){var n=(0,c.useState)(0),t=n[0],e=n[1],r=(0,c.useState)(b),s=r[0],o=(r[1],(0,c.useState)([])),l=o[0],u=o[1],d=(0,c.useState)(!1),m=d[0],p=d[1];return(0,c.useEffect)((function(){var n=[];s.forEach((function(t,e){n.push({type:t.name,currentControlsState:[]}),t.controls.forEach((function(t){t.optionList.forEach((function(t){n[e].currentControlsState.push({name:t.name,state:t.initState})}))}))})),u(n)}),[s]),(0,a.jsxs)("div",{className:_().componentContainer,id:"wizard",children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"How to use: "}),(0,a.jsx)("div",{className:_().scrollWrapper,children:(0,a.jsxs)("div",{className:_().wizardWrapper,children:[(0,a.jsxs)("div",{className:_().header,children:[(0,a.jsxs)("div",{className:_().tokenStandardRow,children:[(0,a.jsx)("div",{className:"".concat(_().controlsDisplayingController," ").concat(m?"":_().open),onClick:function(){return p(!m)},children:(0,a.jsx)("img",{src:"/icons/arrowDown.svg",alt:"icon"})}),s.map((function(n,r){return(0,a.jsx)("div",{onClick:function(){e(r)},className:t===r?"".concat(_().active," ").concat(_().tokenStandard):"".concat(_().tokenStandard),children:n.name},r.toString())}))]}),(0,a.jsx)("div",{className:_().actionsRow})]}),(0,a.jsxs)("div",{className:_().body,children:[(0,a.jsx)("div",{className:m?"".concat(_().contractControls," ").concat(_().closed):"".concat(_().contractControls),children:s.map((function(n,e){return(0,a.jsx)("div",{style:{display:t!==e?"none":"block"},children:n.controls.map((function(n,t){return(0,a.jsxs)("div",{className:_().inputSection,children:[(0,a.jsx)("div",{className:_().controlsSectionName,children:n.sectionName}),(0,a.jsx)("div",{className:_().settingsInputs,children:n.optionList.map((function(n,t){var r,s;if("Symbol"===n.name||"URI"===n.name){var o,i,c,d=null===(o=l[e])||void 0===o?void 0:o.currentControlsState.map((function(n){return n.name})).indexOf("Metadata");if(!1===(null===(i=l[e])||void 0===i||null===(c=i.currentControlsState[d])||void 0===c?void 0:c.state))return}switch(n.type){case"text":return(0,a.jsxs)("div",{className:_().textInput,children:[(0,a.jsxs)("div",{className:_().checkboxContainerNested,children:[(0,a.jsxs)("label",{htmlFor:n.name.split(" ").join("_"),children:[n.name,":"]}),(0,a.jsx)("input",{type:n.type,id:n.name.split(" ").join("_"),name:n.name.split(" ").join("_"),value:null===(r=l[e])||void 0===r?void 0:r.currentControlsState[null===(s=l[e])||void 0===s?void 0:s.currentControlsState.map((function(n){return n.name})).indexOf(n.name)].state,onChange:function(t){var a=(0,S.Z)(l),r=a[e].currentControlsState.map((function(n){return n.name})).indexOf(n.name);a[e].currentControlsState[r].state=t.target.value,u(a)}})]}),n.tooltip&&n.tooltip.length>1?(0,a.jsxs)("div",{className:_().tooltipContainer,children:[(0,a.jsx)("div",{className:_().tooltipInfo,children:n.tooltip}),(0,a.jsx)("img",{className:_().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},t.toString());case"checkbox":return(0,a.jsxs)("label",{className:_().checkboxContainer,children:[(0,a.jsxs)("div",{className:_().checkboxContainerNested,children:[(0,a.jsx)("input",{type:n.type,id:n.name.split(" ").join("_"),name:n.name.split(" ").join("_"),onChange:function(t){var a=(0,S.Z)(l),r=a[e].currentControlsState.map((function(n){return n.name})).indexOf(n.name);a[e].currentControlsState[r].state=t.target.checked,u(a)}}),(0,a.jsx)("span",{children:n.name})]}),n.tooltip&&n.tooltip.length>1?(0,a.jsxs)("div",{className:_().tooltipContainer,children:[(0,a.jsx)("div",{className:_().tooltipInfo,children:n.tooltip}),(0,a.jsx)("img",{className:_().infoIcon,src:"/icons/infoIcon.svg",alt:"icon"})]}):null]},t.toString())}}))})]},t.toString())}))},e.toString())}))}),(0,a.jsx)("div",{className:_().contractOutput,children:s.map((function(n,e){return(0,a.jsx)("div",{style:{display:t!==e?"none":"block"},children:(0,a.jsx)(P,{data:l[e]})},e.toString())}))})]})]})}),(0,a.jsxs)("div",{className:_().bottomLinksButtons,children:[(0,a.jsx)("div",{className:_().bottomLinkBtn,children:(0,a.jsx)(i.default,{href:C.co,children:(0,a.jsx)("a",{children:"Documentation"})})}),(0,a.jsx)("div",{className:_().bottomLinkBtn,children:(0,a.jsx)(i.default,{href:C.YA,children:(0,a.jsx)("a",{target:"_blank",children:"Demo"})})})]})]})},N=e(690),w=e.n(N),B=function(){return(0,a.jsxs)("div",{className:w().informationBlockWrapper,children:[(0,a.jsx)("h2",{className:"primaryHeadline",children:"Openbrush provides:"}),(0,a.jsxs)("div",{className:w().contentWrapper,children:[(0,a.jsxs)("div",{className:w().grid,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(i.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]}),(0,a.jsxs)("div",{className:w().contentUnit,children:[(0,a.jsxs)("h3",{children:["Implementation of ",(0,a.jsx)(i.default,{href:"https://github.com/w3f/PSPs",children:(0,a.jsx)("a",{children:"Polkadot Standards"})}),":"]}),(0,a.jsx)("img",{src:"/img/logo1.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP22: Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP34: Non-Fungible Token"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"PSP1155: Multi-Token"})})]})]}),(0,a.jsxs)("div",{className:w().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful extensions with custom logic:"}),(0,a.jsx)("img",{src:"/img/logo2.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Ownable, Roles"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Mintable, Burnable"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Timelock, Payment Splitter"})})]})]}),(0,a.jsxs)("div",{className:w().contentUnit,children:[(0,a.jsx)("h3",{children:"Useful macro which simplifies development:"}),(0,a.jsx)("img",{src:"/img/logo3.svg",alt:"illustration"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Function modifiers"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Storage definition"})}),(0,a.jsx)("li",{children:(0,a.jsx)("span",{children:"Trait definitions"})})]})]})]}),(0,a.jsx)("div",{className:w().informationBlockWrapperDecor})]})};function M(){return(0,c.useEffect)((function(){f().highlightAll()}),[]),(0,a.jsxs)("div",{children:[(0,a.jsxs)(r.default,{children:[(0,a.jsx)("title",{children:"Openbrush"}),(0,a.jsx)("meta",{name:"keywords",content:"openbrush"}),(0,a.jsx)("meta",{name:"description",content:"openbrush"}),(0,a.jsx)("meta",{name:"google-site-verification",content:"AniwPaa8GCsl_rUlPjd-Po35bxQNLuNPLFYbSohmrhc"})]}),(0,a.jsx)(l,{title:["Smart contracts library for",(0,a.jsx)("span",{style:{color:"#E6007A"},children:" Polkadot "},""),"on",(0,a.jsx)("span",{style:{color:"#B4BE68"},children:" Rust "},"")],illustration:"/img/bannerIllustration.svg"}),(0,a.jsx)(B,{}),(0,a.jsx)(m,{title:"The world\u2019s leading projects trust OpenBrush",data:h}),(0,a.jsx)(y,{})]})}},8581:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return e(1413)}])},2833:function(n){n.exports={bannerContainer:"Banner_bannerContainer__1q1ki",bannerContainerDecorWrapper:"Banner_bannerContainerDecorWrapper__nXf5G",leftBottom:"Banner_leftBottom__Y2H1S",rightBottom:"Banner_rightBottom__3hZEn",ctaContainer:"Banner_ctaContainer__31cMt",bannerInnerContentHolder:"Banner_bannerInnerContentHolder__1PK8L",headlineBlock:"Banner_headlineBlock__UmnJ1",illustrationConstructor:"Banner_illustrationConstructor__3fBom",brushImg:"Banner_brushImg__1b6LW",illustrationContainer:"Banner_illustrationContainer__2cQk9",ink:"Banner_ink__2uWTn",openbrush:"Banner_openbrush__23cWe",contracts:"Banner_contracts__3SBRS"}},690:function(n){n.exports={informationBlockWrapper:"Information_informationBlockWrapper__1dkxt",contentWrapper:"Information_contentWrapper__2XeRP",grid:"Information_grid__3wsO4",contentUnit:"Information_contentUnit__1t4Ch",informationBlockWrapperDecor:"Information_informationBlockWrapperDecor__3-VP9"}},8073:function(n){n.exports={partnersContainer:"Partners_partnersContainer__2RzlM",logoWrapper:"Partners_logoWrapper__3wu-0",partnersContainerDecor:"Partners_partnersContainerDecor__2GwuY"}},7246:function(n){n.exports={componentContainer:"Wizard_componentContainer__3zJFA",scrollWrapper:"Wizard_scrollWrapper__2Csdv",wizardWrapper:"Wizard_wizardWrapper__iyNAC",header:"Wizard_header__1HWND",tokenStandardRow:"Wizard_tokenStandardRow__1LGPX",controlsDisplayingController:"Wizard_controlsDisplayingController__1KGvw",open:"Wizard_open__33Pqm",tokenStandard:"Wizard_tokenStandard__3UODM",active:"Wizard_active__2-1H9",actionsRow:"Wizard_actionsRow__PZGP1",copyToClipboard:"Wizard_copyToClipboard__1iVhd",copyIcon:"Wizard_copyIcon__3pho0",body:"Wizard_body__20k8h",contractControls:"Wizard_contractControls__30QNB",closed:"Wizard_closed__dsA3j",inputSection:"Wizard_inputSection__hTxLh",settingsInputs:"Wizard_settingsInputs__WE65c",textInput:"Wizard_textInput__23e6v",checkboxContainerNested:"Wizard_checkboxContainerNested__3Bww1",controlsSectionName:"Wizard_controlsSectionName__3YTE0",checkboxContainer:"Wizard_checkboxContainer__1KL5V",tooltipContainer:"Wizard_tooltipContainer__FbqR4",tooltipInfo:"Wizard_tooltipInfo__DIVgG",infoIcon:"Wizard_infoIcon__2YE8v",contractOutput:"Wizard_contractOutput__11CLG",bottomLinksButtons:"Wizard_bottomLinksButtons__iUU-V",bottomLinkBtn:"Wizard_bottomLinkBtn__3WoPR"}},5345:function(n){n.exports={tabsSwitch:"WizardOutput_tabsSwitch__3-BOf",activeTab:"WizardOutput_activeTab__b4yTQ"}}},function(n){n.O(0,[905,774,888,179],(function(){return t=8581,n(n.s=t);var t}));var t=n.O();_N_E=t}]);