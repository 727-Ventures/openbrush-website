#![cfg_attr(not(feature = "std"), no_std)]
#![feature(min_specialization)]

#[{{{contract.brush_name}}}::contract]
pub struct my_{{{contract.standard_name}}} {
    // Imports from ink!
    use ink_storage::traits::SpreadAllocate;
    {{#each contract.extensions}}{{#each ink_imports}}{{{this}}}
    {{/each}}{{/each}}

    // Imports from openbrush
    use {{{contract.brush_name}}}::contracts::{{{contract.standard_name}}}::*;
    {{#each contract.extensions}}{{{import}}}
    {{/each}}

    #[ink(storage)]
    #[derive(Default, SpreadAllocate, {{{contract.storage.derive}}}{{#each contract.extensions}}{{#if storage}}, {{{storage.derive}}}{{/if}}{{/each}})]
    pub struct Contract{
        {{{contract.storage.field}}}
        {{{contract.storage.name}}}: {{{contract.storage.type}}},
        {{#each contract.extensions}}{{#if storage}}{{{storage.field}}}
        {{{storage.name}}}: {{{storage.storage.type}}},{{/if}}{{/each}}
    }

    {{{generateTraitImpl contract.impl}}}
    {{#each contract.extensions}}{{{generateTraitImpl impl}}}
    {{/each}}

    impl Contract {
        #[ink(constructor)]
        pub fn new() -> Self {
            ink_lang::codegen::initialize_contract(|_instance: &mut Contract| {})
        }
    }
}